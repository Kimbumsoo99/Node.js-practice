공부 내용 키워드 및 간략한 정리
Chrome V8 JavaScript 엔진으로 빌드된 JavaScript 런타임
Non-blocking I/O
Single Thread
Event Loop

처리 작업 -> Call Stack
비동기 함수 -> Callback Queue

npm(Node Package Manager)

모듈을 사용할 때
기본 Common.js와 ES6에 따른 문법 차이로 인하여
common의 경우 package.json에 require문을 작성하려면 "type":"commonjs" 또는 지워야함.
ES의 경우 package.json에 import문을 작성하려면 "type":"module"을 작성

REST API
REST는 자원을 이름으로 구분하여 해당 자원의 상태를 주고 받는 모든 것
(Representational State Transfer)

HTTP의 CRUD 작업
POST(생성), GET(조회), PUT(수정), DELETE(삭제)

HTTP + JSON 형태로 REST API를 정의하여 클라이언트가 호출해서 요청할 수 있도록 하는 방식

JSON Server 설치
npm i -g json-Server
-> JSON 기반으로 가상의 REST API 서버를 구축할 수 있게하는 npm 모듈
사용법 : json이 있는 해당 폴더에서 * >json-server --watch [파일명].json *으로 실행

== 서버 관련 폴더 정리 ==
base -> 앞에 기본 문법 연습하던 부분(서버와 관련 X)
json -> 연습을 위한 json 관련 파일 저장(서버와 관련 X)

server -> 최상위 폴더. 즉, 현재 서버가 돌아가고 있는 폴더
node_moudles -> npm 관련 저장
routes -> 경로에 따라 특정 역할을 나눈것 (ex; 고객정보, 상품정보)
public -> 정적 파일을 처리하기 위한 파일


- 실행 파일
app.js -> 서버 실행하는 루트 파일
babel.config.json -> ES6 문법을 자유롭게 사용하기 위한 babel 설정
package.json, package-lock.json -> npm 관련 및 서버 관련 정보

== 단축키 ==
Terminal -> Ctrl + `

== VSCode 관련 ==
<확장팩>
JavaScript(ES6)code snippets -> JS 자동완성 (snippets는 재사용 가능한 코드의 작은 조각)
ESLint -> 문법 오류 찾기(Prettier와 함께)

== 미들웨어 ==
미들웨어 함수는 요청과 응답의 중간에 목적에 맞게 기능을 하는 함수
body-parser : HTTP 요청 body 해석 / Express 4.16이상 버전부터 body-parser의 기능이 익스프레스 내장
compression : HTTP 요청 압축
connect-rid : 고유 요청 ID 생성
cookie-parser : 쿠키 헤더 파싱하여 req.cookies에 할당
cors : 쿠키 기반의 세션 생성
csurf : CSRF 취약점 방어
errorhandler : 개발 중 발생하는 에러 핸들링 및 디버깅
method-override : 헤더를 이용해 HTTP 메소드 덮어씀
morgan : HTTP 요청 로그 남김
multer : multi-part 폼 데이터 처리
response-time : 응답 시간 기록
serve-favicon : 파비콘 제공
serve-index : 주어진 경로 디렉터리 리스트 제공
serve-static : 정적 파일 제공
express-session : 서버 기반 세션 생성
connect-timeout : HTTP 요청 처리를 위해 timeout을 생성
vhost : 가상 도메인 생성

== npm install ==
express -> 백엔드 프레임워크
babel -> ES6 문법을 CommonJS로 변경해서 실행해줌.  @babel/cli @babel/core @babel/node @babel/preset-env
body-parser -> 클라이언트로 받는 데이터 처리
compression -> 주어진 옵션을 통해 응답 본문 압축 / 상황에 따라 느려지는 경우도 존재함
cookie-session -> 사용자 세션을 저장하기 위해 쿠키 내에 사용자 세션 데이터를 저장한다. (사용자 세션은 express-session 모듈을 통해 서버에도 저장 가능)
express-session -> 세션을 관리하기 위한 미들웨어로서, cookie-session과는 다르게 데이터를 서버에 저장한다.
session-file-store -> 세션 정보를 파일로 저장해서 관리할 수 있게하는 모듈

== 발생 오류 ==
session-file-store에서 발생한 오류다.
'connect-mongo'라는 npm에서도 발생하는 오류인듯한데, 요구한 뒤 session이 존재하지않아서 그런듯함.
var fileStore = require("session-file-store")(session); 을 통해서 에러는 안나도록 하였지만,
import를 통한 ES6 문법으로 (session)을 주는 방법은 모르겠으며, 실제 사용을 할때도 폴더는 생성됐지만 파일이 생성되지 않는 문제가 발생한다.

해결: import는 아직 모르겠으나 실제 npm 사이트에서 확인해보고 따라하니 문제가 해결됐다. https://www.npmjs.com/package/session-file-store
사용시 파일이 생성되지 않는 문제는 미들웨어가 중간이아닌 마지막에 있었기 때문에 코드 위치를 변경하니 작동했다.
